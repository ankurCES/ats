/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { JobPosition } from "./JobPosition";
import { JobPositionCountArgs } from "./JobPositionCountArgs";
import { JobPositionFindManyArgs } from "./JobPositionFindManyArgs";
import { JobPositionFindUniqueArgs } from "./JobPositionFindUniqueArgs";
import { CreateJobPositionArgs } from "./CreateJobPositionArgs";
import { UpdateJobPositionArgs } from "./UpdateJobPositionArgs";
import { DeleteJobPositionArgs } from "./DeleteJobPositionArgs";
import { JobPositionService } from "../jobPosition.service";
@graphql.Resolver(() => JobPosition)
export class JobPositionResolverBase {
  constructor(protected readonly service: JobPositionService) {}

  async _jobPositionsMeta(
    @graphql.Args() args: JobPositionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [JobPosition])
  async jobPositions(
    @graphql.Args() args: JobPositionFindManyArgs
  ): Promise<JobPosition[]> {
    return this.service.jobPositions(args);
  }

  @graphql.Query(() => JobPosition, { nullable: true })
  async jobPosition(
    @graphql.Args() args: JobPositionFindUniqueArgs
  ): Promise<JobPosition | null> {
    const result = await this.service.jobPosition(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => JobPosition)
  async createJobPosition(
    @graphql.Args() args: CreateJobPositionArgs
  ): Promise<JobPosition> {
    return await this.service.createJobPosition({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => JobPosition)
  async updateJobPosition(
    @graphql.Args() args: UpdateJobPositionArgs
  ): Promise<JobPosition | null> {
    try {
      return await this.service.updateJobPosition({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => JobPosition)
  async deleteJobPosition(
    @graphql.Args() args: DeleteJobPositionArgs
  ): Promise<JobPosition | null> {
    try {
      return await this.service.deleteJobPosition(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}

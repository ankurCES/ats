/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { JobPositionService } from "../jobPosition.service";
import { JobPositionCreateInput } from "./JobPositionCreateInput";
import { JobPosition } from "./JobPosition";
import { JobPositionFindManyArgs } from "./JobPositionFindManyArgs";
import { JobPositionWhereUniqueInput } from "./JobPositionWhereUniqueInput";
import { JobPositionUpdateInput } from "./JobPositionUpdateInput";

export class JobPositionControllerBase {
  constructor(protected readonly service: JobPositionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: JobPosition })
  async createJobPosition(
    @common.Body() data: JobPositionCreateInput
  ): Promise<JobPosition> {
    return await this.service.createJobPosition({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        requirements: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [JobPosition] })
  @ApiNestedQuery(JobPositionFindManyArgs)
  async jobPositions(@common.Req() request: Request): Promise<JobPosition[]> {
    const args = plainToClass(JobPositionFindManyArgs, request.query);
    return this.service.jobPositions({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        requirements: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: JobPosition })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async jobPosition(
    @common.Param() params: JobPositionWhereUniqueInput
  ): Promise<JobPosition | null> {
    const result = await this.service.jobPosition({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        requirements: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: JobPosition })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateJobPosition(
    @common.Param() params: JobPositionWhereUniqueInput,
    @common.Body() data: JobPositionUpdateInput
  ): Promise<JobPosition | null> {
    try {
      return await this.service.updateJobPosition({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          requirements: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: JobPosition })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteJobPosition(
    @common.Param() params: JobPositionWhereUniqueInput
  ): Promise<JobPosition | null> {
    try {
      return await this.service.deleteJobPosition({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          requirements: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

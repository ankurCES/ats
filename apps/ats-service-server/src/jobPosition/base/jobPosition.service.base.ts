/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, JobPosition as PrismaJobPosition } from "@prisma/client";

export class JobPositionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.JobPositionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.jobPosition.count(args);
  }

  async jobPositions(
    args: Prisma.JobPositionFindManyArgs
  ): Promise<PrismaJobPosition[]> {
    return this.prisma.jobPosition.findMany(args);
  }
  async jobPosition(
    args: Prisma.JobPositionFindUniqueArgs
  ): Promise<PrismaJobPosition | null> {
    return this.prisma.jobPosition.findUnique(args);
  }
  async createJobPosition(
    args: Prisma.JobPositionCreateArgs
  ): Promise<PrismaJobPosition> {
    return this.prisma.jobPosition.create(args);
  }
  async updateJobPosition(
    args: Prisma.JobPositionUpdateArgs
  ): Promise<PrismaJobPosition> {
    return this.prisma.jobPosition.update(args);
  }
  async deleteJobPosition(
    args: Prisma.JobPositionDeleteArgs
  ): Promise<PrismaJobPosition> {
    return this.prisma.jobPosition.delete(args);
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { RecruitmentStage } from "./RecruitmentStage";
import { RecruitmentStageCountArgs } from "./RecruitmentStageCountArgs";
import { RecruitmentStageFindManyArgs } from "./RecruitmentStageFindManyArgs";
import { RecruitmentStageFindUniqueArgs } from "./RecruitmentStageFindUniqueArgs";
import { CreateRecruitmentStageArgs } from "./CreateRecruitmentStageArgs";
import { UpdateRecruitmentStageArgs } from "./UpdateRecruitmentStageArgs";
import { DeleteRecruitmentStageArgs } from "./DeleteRecruitmentStageArgs";
import { RecruitmentStageService } from "../recruitmentStage.service";
@graphql.Resolver(() => RecruitmentStage)
export class RecruitmentStageResolverBase {
  constructor(protected readonly service: RecruitmentStageService) {}

  async _recruitmentStagesMeta(
    @graphql.Args() args: RecruitmentStageCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [RecruitmentStage])
  async recruitmentStages(
    @graphql.Args() args: RecruitmentStageFindManyArgs
  ): Promise<RecruitmentStage[]> {
    return this.service.recruitmentStages(args);
  }

  @graphql.Query(() => RecruitmentStage, { nullable: true })
  async recruitmentStage(
    @graphql.Args() args: RecruitmentStageFindUniqueArgs
  ): Promise<RecruitmentStage | null> {
    const result = await this.service.recruitmentStage(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => RecruitmentStage)
  async createRecruitmentStage(
    @graphql.Args() args: CreateRecruitmentStageArgs
  ): Promise<RecruitmentStage> {
    return await this.service.createRecruitmentStage({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => RecruitmentStage)
  async updateRecruitmentStage(
    @graphql.Args() args: UpdateRecruitmentStageArgs
  ): Promise<RecruitmentStage | null> {
    try {
      return await this.service.updateRecruitmentStage({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RecruitmentStage)
  async deleteRecruitmentStage(
    @graphql.Args() args: DeleteRecruitmentStageArgs
  ): Promise<RecruitmentStage | null> {
    try {
      return await this.service.deleteRecruitmentStage(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}

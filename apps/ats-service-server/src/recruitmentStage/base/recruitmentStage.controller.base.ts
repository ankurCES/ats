/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RecruitmentStageService } from "../recruitmentStage.service";
import { RecruitmentStageCreateInput } from "./RecruitmentStageCreateInput";
import { RecruitmentStage } from "./RecruitmentStage";
import { RecruitmentStageFindManyArgs } from "./RecruitmentStageFindManyArgs";
import { RecruitmentStageWhereUniqueInput } from "./RecruitmentStageWhereUniqueInput";
import { RecruitmentStageUpdateInput } from "./RecruitmentStageUpdateInput";

export class RecruitmentStageControllerBase {
  constructor(protected readonly service: RecruitmentStageService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RecruitmentStage })
  async createRecruitmentStage(
    @common.Body() data: RecruitmentStageCreateInput
  ): Promise<RecruitmentStage> {
    return await this.service.createRecruitmentStage({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        stageName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [RecruitmentStage] })
  @ApiNestedQuery(RecruitmentStageFindManyArgs)
  async recruitmentStages(
    @common.Req() request: Request
  ): Promise<RecruitmentStage[]> {
    const args = plainToClass(RecruitmentStageFindManyArgs, request.query);
    return this.service.recruitmentStages({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        stageName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RecruitmentStage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async recruitmentStage(
    @common.Param() params: RecruitmentStageWhereUniqueInput
  ): Promise<RecruitmentStage | null> {
    const result = await this.service.recruitmentStage({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        stageName: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RecruitmentStage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRecruitmentStage(
    @common.Param() params: RecruitmentStageWhereUniqueInput,
    @common.Body() data: RecruitmentStageUpdateInput
  ): Promise<RecruitmentStage | null> {
    try {
      return await this.service.updateRecruitmentStage({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          stageName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RecruitmentStage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRecruitmentStage(
    @common.Param() params: RecruitmentStageWhereUniqueInput
  ): Promise<RecruitmentStage | null> {
    try {
      return await this.service.deleteRecruitmentStage({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          stageName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
